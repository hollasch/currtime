Acceptance Tests for `timeprint`
================================================================================

--------------------------------------------------------------------------------
[-h]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[-H]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[/h]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[/H]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[-?]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
["/?"]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[--help]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
[--HELP]
timeprint v2.0.0+  |  https://github.com/hollasch/timeprint
timeprint - Print time and date information

usage: timeprint [--codeChar <char>] [-c<char>]
                 [--help] [-h] [/?]
                 [--modTime <fileName>] [-m<fileName>]
                 [--accessTime <fileName>] [-a<accessTime>]
                 [--timeZone <zone>] [-z<zone>]
                 [string] ... [string]

This command prints time information to the standard output stream. All string
fragments will be concatenated with a space, so it's usually unnecessary to
quote the format string.

Command switches may be prefixed with a dash (-) or a slash (/).

--accessTime, -a
    Use the time of last access of the named file for a time value.

--codeChar, -c
    The codeChar switch specifies an alternate code character to the default
    '%' character (format codes are described below). If the backslash (\)
    is specified as the code character, then normal backslash escapes will
    be disabled. The --codeChar switch is ignored unless the format string is
    specified on the command line.

--help, -h, /h, -?, /?
    Print help and usage information.

--modTime, -m
    The modTime switch specifies the name of a file whose modification time is
    used as the base time (instead of 1970-01-01 00:00:00). This is useful for
    reporting time elapsed since a given file's modification.

--timeZone, -z
    The timeZone argument takes a timezone string of the form used by the
    _tzset function. If no timezone is specified, the system local time is
    used. The timezone also be set in the environment via the TZ environment
    variable. The format of this string is "tzn[+|-]hh[:mm[:ss]][dzn]", where

        tzn
            Three-letter time-zone name, such as PST. You must specify the
            correct offset from local time to UTC.

        hh
            Difference in hours between UTC and local time. Optionally signed.

        mm
            Minutes, separated with a colon (:).

        ss
            Seconds, separated with a colon (:).

        dzn
            Three-letter daylight-saving-time zone such as PDT. If daylight
            saving time is never in effect in the locality, omit dzn. The C
            run-time library assumes the US rules for implementing the
            calculation of Daylight Saving Time (DST).

        Examples of the timezone string include the following:

            UTC       Universal Coordinated Time
            PST8      Pacific Standard Time
            PST8PDT   Pacific Standard Time, daylight savings in effect
            GST-1GDT  German Standard Time, daylight savings in effect

If no output string is supplied, the format specified in the environment
variable TIMEFORMAT is used. If this variable is not set, then the format
defaults to "%#c".

Note that if your format string begins with - or /, you will need to prefix it
with a \ character so that it is not confused with a command switch.

Strings take both \-escaped characters and %-codes in the style of printf.
The \ escape codes include \n (newline), \t (tab), \b (backspace),
\r (carriage return), and \a (alert, or beep).

The %-codes are

    %a     Abbreviated weekday name *
    %A     Full weekday name *
    %b     Abbreviated month name *
    %B     Full month name *
    %c     Date and time representation *
    %C     Year divided by 100 and truncated to integer (00-99)
    %d     Day of month as decimal number (01-31)
    %D     Short MM/DD/YY date, equivalent to %m/%d/%y
    %e     Day of the month, space-padded ( 1-31)
    %F     Short YYYY-MM-DD date, equivalent to %Y-%m-%d
    %g     Week-based year, last two digits (00-99)
    %G     Week-based year
    %h     Abbreviated month name (same as %b) *
    %H     Hour in 24-hour format (00-23)
    %I     Hour in 12-hour format (01-12)
    %j     Day of year as decimal number (001-366)
    %m     Month as decimal number (01-12)
    %M     Minute as decimal number (00-59)
    %n     New line character (same as '\n')
    %p     AM or PM designation
    %r     12-hour clock time *
    %R     24-hour HH:MM time, equivalent to %H:%M
    %S     Seconds as a decimal number (00-59)
    %t     Horizontal tab character (same as '\t')
    %T     ISO 8601 time format (HH:MM:SS) equivalent to %H:%M:%S
    %u     ISO 8601 weekday as number with Monday=1 (1-7)
    %U     Week number, first Sunday = week 1 day 1 (00-53)
    %V     ISO 8601 week number (01-53)
    %w     Weekday as decimal number, Sunday = 0 (0-6)
    %W     Week of year, decimal, Monday = week 1 day 1(00-51)
    %x     Date representation *
    %X     Time representation *
    %y     Year without century, as decimal number (00-99)
    %Y     Year with century, as decimal number
    %z     ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100)
           If timezone cannot be determined, no characters
    %Z     Time-zone name or abbreviation, empty for unrecognized zones *
    %_d    Elapsed whole days
    %_h    Elapsed whole hours
    %_s    Elapsed whole seconds
    %%     Percent sign

    * Specifiers marked with an asterisk are locale-dependent.

As in the printf function, the # flag may prefix any formatting code. In that
case, the meaning of the format code is changed as follows.

    %#c
        Long date and time representation, appropriate for current locale.
        For example: Tuesday, March 14, 1995, 12:41:29.

    %#x
        Long date representation, appropriate to current locale.
        For example: Tuesday, March 14, 1995.

    %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y
        Remove any leading zeros.

    All others
        The flag is ignored.


Examples:

    > timeprint
    Sunday, July 20, 2003 17:02:39

    > timeprint %H:%M:%S
    17:03:17

    > timeprint -z UTC
    Monday, July 21, 2003 00:03:47

    > timeprint Building endzones [%Y-%m-%d %#I:%M:%S %p].
    Building endzones [2003-07-20 5:06:09 PM].

    > echo. >timestamp.txt

    [about a day and a half later...]

    > timeprint -m timestamp.txt Elapsed Time: %_dd, %H:%M:%S
    Elapsed Time: 1d, 12:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_h:%M:%S
    Elapsed Time: 36:03:47
    > timeprint -m timestamp.txt Elapsed Time: %_s seconds
    Elapsed Time: 129827 seconds


--------------------------------------------------------------------------------
Error Test [--]
timeprint: Unrecognized switch (--).
--------------------------------------------------------------------------------
Error Test [-]
timeprint: Null option switch.
--------------------------------------------------------------------------------
Error Test [--bogusSwitch]
timeprint: Unrecognized switch (--bogusSwitch).
--------------------------------------------------------------------------------
Error Test [-m]
timeprint: Missing argument for (-m/--modTime) option.
--------------------------------------------------------------------------------
Error Test [--modTime]
timeprint: Missing argument for (-m/--modTime) option.
--------------------------------------------------------------------------------
Error Test [--modTime someBogusFile]
timeprint: Couldn't get status of "someBogusFile".
--------------------------------------------------------------------------------
Error Test [--modTime file1 --modTime file2 --modTime bogusThirdOption]
timeprint: Unexpected third time value (bogusThirdOption).
--------------------------------------------------------------------------------
Error Test [-z]
timeprint: Missing argument for (-z/--timeZone) option.
--------------------------------------------------------------------------------
Error Test [--timezone]
timeprint: Missing argument for (-z/--timeZone) option.
--------------------------------------------------------------------------------
[A b c d e Hello world f g h i j]
A b c d e Hello world f g h i j
--------------------------------------------------------------------------------
["A b c d e Hello world f g h i j"]
A b c d e Hello world f g h i j
--------------------------------------------------------------------------------
["A\nB\nC"]
A
B
C
--------------------------------------------------------------------------------
["A\tB\tC"]
A	B	C
--------------------------------------------------------------------------------
["A%nB%nC"]
A
B
C
--------------------------------------------------------------------------------
["A%tB%tC"]
A	B	C
--------------------------------------------------------------------------------
[Percent sign = %%]
Percent sign = %
--------------------------------------------------------------------------------
[Bogus codes: %E%f%i%J%N%P%s%v]
Bogus codes: %E%f%i%J%N%P%s%v
--------------------------------------------------------------------------------
[Bogus codes: %_a %_z]
Bogus codes: %_a %_z
--------------------------------------------------------------------------------
